name: CI Tests
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # ---------------------------------------------------------------------------------------------------------------------
  # Dynamic matrix
  # Compute how subsequent jobs will run in parallel
  # ---------------------------------------------------------------------------------------------------------------------
  matrix:
    name: Generate modules matrix
    runs-on: ubuntu-latest
    outputs:
      templates: ${{ steps.templates.outputs.matrix }}
      modules: ${{ steps.modules.outputs.matrix }}
      examples: ${{ steps.examples.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2

      - id: templates
        name: Get Terraform modules/templates for unit testing
        run: echo "::set-output name=matrix::[$(matrix=($(ls templates)); printf '"%s",' "${matrix[@]}")]"

      - id: modules
        name: Get Terraform modules for integration testing
        run: echo "::set-output name=matrix::[$(matrix=($(ls modules)); printf '"%s",' "${matrix[@]}")]"

      - id: examples
        name: Get oStack examples for end-to-end testing
        run: echo "::set-output name=matrix::[$(matrix=($(ls examples/*.tf | sed -E 's`^examples/(.*)\.tf$`\1`')); printf '"%s",' "${matrix[@]}")]"

  # ---------------------------------------------------------------------------------------------------------------------
  # Unit testing
  # Static code analysis, linting, security scanning, dry-runs
  # No real resources are deployed
  # ---------------------------------------------------------------------------------------------------------------------
  unit-modules:
    name: Unit test (modules/${{ matrix.path }})
    needs: matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        path: ${{fromJSON(needs.matrix.outputs.terraform)}}
    env:
      DIR: modules/${{ matrix.path }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - if: github.event_name == 'pull_request'
        id: changed
        continue-on-error: true
        name: Check if ${{ matrix.path }} has changed
        run: "! git diff --quiet HEAD~1 HEAD -- $DIR"

      - if: github.event_name == 'push' || steps.changed.outcome == 'success'
        name: Validate Terraform configuration files
        run: ./.config/tf_validate.sh $DIR

      - if: github.event_name == 'push' || steps.changed.outcome == 'success'
        name: Test Terraform module
        run: ./.config/tf_test.sh $DIR

  unit-templates:
    name: Unit test (templates/${{ matrix.path }})
    needs: matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        path: ${{fromJSON(needs.matrix.outputs.templates)}}
    env:
      DIR: templates/${{ matrix.path }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - if: github.event_name == 'pull_request'
        id: changed
        continue-on-error: true
        name: Check if ${{ matrix.path }} has changed
        run: "! git diff --quiet HEAD~1 HEAD -- $DIR"

      - if: (github.event_name == 'push' || steps.changed.outcome == 'success') && contains(matrix.path, '-ops')
        name: Validate Kubernetes configuration files
        run: ./.config/kube_validate.sh $DIR/**

      - if: (github.event_name == 'push' || steps.changed.outcome == 'success') && contains(matrix.path, '-infra')
        name: Validate Terraform configuration files
        run: ./.config/tf_validate.sh $DIR
        env:
          SKIP_TERRAFORM_VALIDATE: 1

  # ---------------------------------------------------------------------------------------------------------------------
  # Integration testing
  # Real resources are deployed
  # Doesn't run for PRs from forked repositories for security reasons
  # ---------------------------------------------------------------------------------------------------------------------
  integration:
    name: Integration test
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    needs: matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        path: ${{fromJSON(needs.matrix.outputs.modules)}}
    env:
      DIR: modules/${{ matrix.path }}
      TF_VAR_organization_name: ${{ secrets.CI_GITHUB_OWNER }}
      TF_VAR_cloud_default_provider: linode
      TF_VAR_tfe_oauth_token_id: ${{ secrets.CI_TFE_OAUTH_TOKEN_ID }}
      TF_VAR_vcs_write_token: '{ github="${{ secrets.CI_GITHUB_TOKEN }}" }'
      TF_VAR_sensitive_inputs: '{ my_other_secret = "This is marked as sensitive" }'
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      GITHUB_OWNER: ${{ secrets.CI_GITHUB_OWNER }}
      LINODE_TOKEN: ${{ secrets.CI_LINODE_TOKEN }}
      DIGITALOCEAN_TOKEN: ${{ secrets.CI_DIGITALOCEAN_TOKEN }}
      TFE_TOKEN: ${{ secrets.CI_TFE_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        run: terraform init
        working-directory: ${{ env.DIR }}

      - name: Run Terraform plan
        run: terraform plan -input=false -out tf.plan

      - name: Convert Terraform plan to JSON
        run: terraform show -json tf.plan > tf.plan.json

      - name: Prettify JSON plan to get meaningful errors in checkov
        # A weird GH actions bug injects actions metadata in the output so we filter only the lines containing JSON
        run: grep '^{"' tf.plan.json | jq '.' > tf.plan.pretty.json

      - name: Run checkov
        run: docker run -v "$(pwd):/src" bridgecrew/checkov -d /src/${{ env.DIR }} --config-file /src/.config/.checkov.yaml --repo-root-for-plan-enrichment /src/${{ env.DIR }}

  # ---------------------------------------------------------------------------------------------------------------------
  # End-to-end testing
  # Real resources are deployed
  # Doesn't run for PRs from forked repositories for security reasons
  # ---------------------------------------------------------------------------------------------------------------------
  e2e:
    name: E2E test
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    needs: [matrix, unit-finalizer]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test_case: ${{fromJSON(needs.matrix.outputs.examples)}}
      fail-fast: false
    env:
      TF_VAR_organization_name: ${{ secrets.CI_GITHUB_OWNER }}
      TF_VAR_cloud_default_provider: linode
      TF_VAR_tfe_oauth_token_id: ${{ secrets.CI_TFE_OAUTH_TOKEN_ID }}
      TF_VAR_vcs_write_token: '{ github="${{ secrets.CI_GITHUB_TOKEN }}" }'
      TF_VAR_sensitive_inputs: '{ my_other_secret = "This is marked as sensitive" }'
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      GITHUB_OWNER: ${{ secrets.CI_GITHUB_OWNER }}
      LINODE_TOKEN: ${{ secrets.CI_LINODE_TOKEN }}
      DIGITALOCEAN_TOKEN: ${{ secrets.CI_DIGITALOCEAN_TOKEN }}
      TFE_TOKEN: ${{ secrets.CI_TFE_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Prepare test case
        run: TEST_NAME=$(sed -E 's`[^a-z0-9]``g' <<< "${{ matrix.test_case }}"); cp -a examples/common/. . && cat "examples/${{ matrix.test_case }}.tf" | sed 's`Olivr/oStack/oStack`./modules/ostack`g' | sed 's`version\s*=\s*".*$`dev_mode = {}\n prefix = "'"${TEST_NAME:0:9}"'-"`' | sed 's`repo_archive_on_destroy\s*=.*$`repo_archive_on_destroy = false\nrepo_private = false`' > main.tf

      - name: Initialize Terraform
        run: terraform init

      - name: Validate Terraform config
        run: terraform validate

      - name: Terraform security scan
        run: docker run -v "$(pwd):/src" tfsec/tfsec /src

      - name: Run Terraform plan
        run: terraform plan -input=false -out tf.plan

      - name: Convert Terraform plan to JSON
        run: terraform show -json tf.plan > tf.plan.json

      - name: Prettify JSON plan to get meaningful errors in checkov
        # A weird GH actions bug injects actions metadata in the output so we filter only the lines containing JSON
        run: grep '^{"' tf.plan.json | jq '.' > tf.plan.pretty.json

      - name: Remove extraneous plan files
        run: rm -rf tf.plan.json

      - name: Run checkov
        run: docker run -v "$(pwd):/src" bridgecrew/checkov -d /src --config-file /src/.config/.checkov.yaml --repo-root-for-plan-enrichment /src

      - name: Apply Terraform
        run: terraform apply -auto-approve tf.plan

      - name: Destroy Terraform
        if: always()
        run: terraform destroy -auto-approve

  # ---------------------------------------------------------------------------------------------------------------------
  # Finalizers
  # These are used to determine how successful was each test suite
  # It simplifies management of required status checks
  # ---------------------------------------------------------------------------------------------------------------------
  unit-finalizer:
    name: Passed all unit tests
    if: always()
    runs-on: ubuntu-latest
    needs: [unit-modules, unit-templates]
    steps:
      - name: All tests passed successfully ✅
        if: needs.unit-modules.result == 'success' && needs.unit-templates.result == 'success'
        run: exit 0

      - name: Some tests failed ❌
        if: needs.unit-modules.result != 'success' || needs.unit-templates.result != 'success'
        run: exit 1

  integration-finalizer:
    name: Passed all integration tests
    if: always()
    runs-on: ubuntu-latest
    needs: [integration, unit-finalizer]
    steps:
      - name: All tests passed successfully ✅
        if: needs.unit-finalizer.result == 'success' && needs.integration.result == 'success'
        run: exit 0

      - name: Integration testing was skipped
        if: needs.unit-finalizer.result == 'success' && needs.integration.result == 'skipped'
        run: exit 0

      - name: Some tests failed ❌
        if: needs.unit-finalizer.result != 'success' || (needs.integration.result != 'success' && needs.integration.result != 'skipped')
        run: exit 1

  e2e-finalizer:
    name: Passed all end-to-end tests
    if: always()
    runs-on: ubuntu-latest
    needs: [e2e, integration-finalizer]
    steps:
      - name: All tests passed successfully ✅
        if: needs.integration-finalizer.result == 'success' && needs.e2e.result == 'success'
        run: exit 0

      - name: End-to-end testing was skipped
        if: needs.integration-finalizer.result == 'success' && needs.e2e.result == 'skipped'
        run: exit 0

      - name: Some tests failed ❌
        if: needs.integration-finalizer.result != 'success' || (needs.e2e.result != 'success' && needs.e2e.result != 'skipped')
        run: exit 1

  finalizer:
    name: Passed all CI tests
    if: always()
    runs-on: ubuntu-latest
    needs: [e2e-finalizer]
    steps:
      - name: All tests passed successfully ✅
        if: needs.e2e-finalizer.result == 'success'
        run: exit 0

      - name: Some tests failed ❌
        if: needs.e2e-finalizer.result != 'success'
        run: exit 1
